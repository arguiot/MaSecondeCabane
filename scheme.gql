type Product @collection(name: "products") {
  name: String!
  description: String!
  descriptionEn: String
  price: Int!
  boughtPrice: Int # Price at which the item was bought
  waitingForCollect: Boolean
  quantity: Int!
  image: String! # Image URL
  sexe: String!
  size: String!
  brand: String!
  etat: String!
  type: String!
  tags: [String!]!
  creation: Long # Timestamp as Int but was too big to fit in Int
  favorite: Boolean!
  composition: [String!]
}

type Customer @embedded {
  firstName: String!
  lastName: String!
  address: Address!
  telephone: String!
  email: String!
}

type Request @collection(name: "requests") {
  customer: Customer!
  description: String!
  done: Boolean
}

type Order @collection(name: "orders") {
  customer: Customer!
  line: [ProductLine!]!
  stripeID: String!
  total: Float!
  done: Boolean
  delivery: Boolean!
}

type Address @embedded {
  street: String!
  city: String!
  country: String!
  zipCode: String!
}

type ProductLine @embedded {
  product: ID! # Product ID
  quantity: Int!
}

type WebsiteConfig @collection(name: "websiteConfig") {
  locked: Boolean! # if the website is locked for pop up store
  popUpAddress: Address! # Address of the pop up store
  freeShipping: Int! # Minimum amount for free shipping
  delayDelivery: String # (Optional) Delay for delivery as a message
}

type Query {
  allProducts: [Product!]! @index(name: "all_products")
  allOrders: [Order!]! @index(name: "all_orders")
  allRequest: [Request!]! @index(name: "all_requests")
  allConfigs: [WebsiteConfig!]! @index(name: "website_config")
}